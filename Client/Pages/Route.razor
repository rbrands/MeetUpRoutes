@page "/{TrackKey}/{Scope}"
@using System.Text.RegularExpressions
@using BlazorApp.Client.Utils
@using BlazorApp.Client.Shared
@using BlazorApp.Shared
@using System.Web
@inject AppState AppStateStore
@inject BackendApiRepository Api
@inject ClubCheck ClubCheck
@inject NavigationManager NavigationManager

<PageTitle> 
    MeetUpRoutes - @AppStateStore.Tenant?.TenantName
</PageTitle>

<HeadContent>
    <meta property="og:type" content="article" />
    <meta property="og:title" content="@_firstRoute?.Core.Title" />
    <meta property="og:description" content="@StripHTML(_firstRoute?.Core.Description)" />
    <meta property="og:image" content="@_firstRoute?.Core.RouteLinkImage" />
</HeadContent>

<BlazorApp.Client.Shared.NotificationMessage @ref="@_notificationMessage" />

@if (null == _routes)
{
    <p><em>Deine Zugriffsrechte werden geprüft und Daten werden geladen... Beim ersten Aufruf dauert das ein bisschen.</em></p>
}
else
{
    <p>
        <AuthorizeView>
            <NotAuthorized>
                <a class="btn btn-primary" href="/LoginProviders/@Scope">Anmelden</a>
            </NotAuthorized>
        </AuthorizeView>
    </p>
    <div class="row">
        @foreach (ExtendedRoute route in _routes)
        {
            <div class="col">
                <RouteCard RouteItem="@route"></RouteCard>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public string TrackKey { get; set; }
    [Parameter]
    public string Scope { get; set; }
    private NotificationMessage _notificationMessage;
    IEnumerable<ExtendedRoute> _routes = null;
    RouteFilter _filter = new RouteFilter();
    ExtendedRoute _firstRoute;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check if a club is given as part of url or selected before
            if (!await ClubCheck.SetClub(TrackKey))
            {
                NavigationManager.NavigateTo("/");
                return;
            }
            if (!String.IsNullOrEmpty(Scope))
            {
                _filter.Scope = Scope;
            }
            else
            {
                NavigationManager.NavigateTo("/");
                return;
            }
            _routes = await Api.GetRoutes(_filter);
            _firstRoute = _routes.FirstOrDefault();
        }
        catch (Exception ex)
        {
            _notificationMessage.ShowError($"Fehler: {ex.Message}");
            return;
        }
    }

    private async Task Reload()
    {
        try
        {
            _routes = await Api.GetRoutes(_filter);
            _firstRoute = _routes.FirstOrDefault();
        }
        catch (Exception ex)
        {
            _notificationMessage.ShowError($"Fehler: {ex.Message}");
        }
    }

    public string StripHTML(string HTMLText, bool decode = true)
    {
        if (null != HTMLText)
        {
            Regex reg = new Regex("<[^>]+>", RegexOptions.IgnoreCase);
            var stripped = reg.Replace(HTMLText, "");
            return decode ? HttpUtility.HtmlDecode(stripped) : stripped;
        }
        else
        {
            return null;
        }
    }
}
