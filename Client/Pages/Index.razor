@page "/"
@page "/{TrackKey}"
@using BlazorApp.Shared
@using BlazorApp.Client.Utils
@inject AppState AppStateStore
@inject ClubCheck ClubCheck
@inject BackendApiRepository Api
@inject NavigationManager NavigationManager


<BlazorApp.Client.Shared.NotificationMessage @ref="@_notificationMessage" />

<div class="jumbotron">
    <h3>Routen @AppStateStore.Tenant.TenantName</h3>
    <div class="row">
        @if (!String.IsNullOrEmpty(AppStateStore.Settings?.LogoLink))
        {
            <div class="col-3">
                <img src="@AppStateStore.Settings?.LogoLink" class="img-fluid" />
            </div>
        }
    <div class="col">
        @if (!AppStateStore.TenantsAlreadyRead)
        {
            <p><em>Einstellungen werden gelesen...</em></p>
        }
        else if (String.IsNullOrEmpty(AppStateStore.TrackKey))
        {
            <p>
                Zunächst musst du einen Club auswählen, um die Routen zu sehen.
            </p>
            <p class="container">
                @foreach (TenantSettings tenant in AppStateStore.Tenants)
                {
                    if (tenant.TracksEnabled && tenant.TrackKey.CompareTo("demo") != 0)
                    {
                        <div class="row">
                            <div class="col-sm-12 col-md-6 col-lg-4">
                                <button type="button" class="btn btn-lg btn-block btn-outline-info btn-social" @onclick="@(() => ShowRoutes(tenant.TrackKey))">@tenant.TenantName</button>
                            </div>
                        </div>
                    }
                }
            </p>
        }
        else
        {
            <p>
                <a class="btn btn-primary" href=@($"/{AppStateStore.TrackKey}/routes") title="Routen">Zu den Routen</a>
            </p>
        }
        <p>
            @if (!String.IsNullOrEmpty(AppStateStore.TrackKey))
            {
                <EditArticle ArticleKey="Start"></EditArticle>
            }
        </p>
    </div>
    </div>
</div>

@if (null != AppStateStore.TrackKey)
{
    <div class="jumbotron">
        <h3>Dein Status</h3>
        <AuthorizeView>
            <Authorized>
                <p>
                    <a class="btn btn-primary" href=@($"/{AppStateStore.TrackKey}/profile")>Profil</a>
                </p>
                <p>
                    Du bist angemeldet und hast den folgenden Mitgliedsstatus:
                    <ul>
                        <li>
                            @if (_userInfo.IsConfirmed)
                            {
                                <text>
                                    Du bist als Clubmitglied bestätigt, d.h. du kannst neben den öffentlichen Routen auch Routen sehen, die nur für Mitglieder sichtbar sind.
                                </text>
                            }
                            else
                            {
                                <text>
                                    Dein Account ist noch nicht bestätigt.
                                    Fülle die <a href=@($"/{AppStateStore.TrackKey}/profile") title="Profil">Profilseite</a> aus und gebe dort das Schlüsselwort ein, sofern bekannt oder bitte die Administratoren um Freigabe.
                                    Sobald dein Account bestätigt ist, kannst du alle Routen sehen.
                                </text>
                            }
                        </li>
                        <li>
                            @if (_userInfo.IsAuthor)
                            {
                                <text>Dein Account hat Autor:innen-Berechtigung. D.h. du kannst Routen erstellen, die ohne ein Review veröffentlicht werden.</text>
                            }
                            else
                            {
                                <text>Du hast noch keine Autor:innen-Berechtigung, d.h. Routen, die du erstellst, müssen erst gereviewed werden, bevor sie veröffentlicht werden.</text>
                            }
                        </li>
                        @if (_userInfo.IsReviewer)
                        {
                            <li>Dein Account hat Review-Berechtigung, d.h. du kannst Routen von Mitgliedern, die noch keine Autor:innen-Berechtigung haben, sehen und freigeben.</li>
                        }
                        <AuthorizeView Roles="@AppStateStore.Tenant.AdminRole">
                            <Authorized Context="authorizeContext">
                                <li>Du bist Administrator für diesen Club.</li>
                            </Authorized>
                        </AuthorizeView>
                    </ul>
                </p>
            </Authorized>
            <NotAuthorized>
                <p>
                    Um Routen zu erstellen usw. musst du dich anmelden und entsprechende Berechtigungen erhalten. MeetUpRoutes hat folgende Mitgliedslevel:
                    <ul>
                        <li>Ohne Anmeldung kannst du nur öffentliche Routen sehen.</li>
                        <li>Wenn du dich anmeldest und als Clubmitglied bestätigt wirst, kannst du auch nicht öffentliche Routen sehen und selbst Routen erstellen.</li>
                        <li>Wenn du den Autor:innen-Status erhälst, kannst du Routen erstellen, die ohne weiteres Review sofort veröffentlicht werden.</li>
                        <li>Hast du auch die "Review"-Berechtigung kannst du Routen der Mitglieder reviewen und freigeben.</li>
                    </ul>
                    <a class="btn btn-primary" href="/LoginProviders">Anmelden</a>
                </p>
            </NotAuthorized>
        </AuthorizeView>
    </div>
}

@code {
    [Parameter]
    public string TrackKey { get; set; }
    private NotificationMessage _notificationMessage;
    private UserContactInfo _userInfo = new UserContactInfo();

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(TrackKey))
        {
            AppStateStore.TrackKey = TrackKey;
        }
        try
        {
            bool validTrackKey = await ClubCheck.SetClub(TrackKey);
            if (await ClubCheck.SetClub(TrackKey))
            {
                _userInfo = AppStateStore.CurrentUser.ContactInfo;
            }
            else if (!String.IsNullOrEmpty(TrackKey))
            {
                _notificationMessage.ShowWarning("Bitte einen existierenden Club auswählen.");
            }
        }
        catch (Exception ex)
        {
            _notificationMessage.ShowError($"Fehler beim Lesen der Daten: {ex.Message}");
        }
    }
    protected async Task ShowRoutes(string trackKey)
    {
        try
        {
            if (await ClubCheck.SetClub(trackKey))
            {
                _userInfo = AppStateStore.CurrentUser.ContactInfo;
                NavigationManager.NavigateTo($"/{trackKey}");
            }
            else
            {
                _notificationMessage.ShowError("Falsche Club-Konfiguration");
            }
        }
        catch (Exception ex)
        {
            _notificationMessage.ShowError(ex.Message);
        }
    }

}
