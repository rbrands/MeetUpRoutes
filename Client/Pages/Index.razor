@page "/"
@page "/{TrackKey}"
@using BlazorApp.Shared
@using BlazorApp.Client.Utils
@inject AppState AppStateStore
@inject BackendApiRepository Api
@inject NavigationManager NavigationManager


<BlazorApp.Client.Shared.NotificationMessage @ref="@_notificationMessage" />

<div class="jumbotron">
    <h3>Tourenverwaltung @AppStateStore.Tenant.TenantName</h3>
    @if (!AppStateStore.TenantsAlreadyRead)
    {
        <p><em>Einstellungen werden gelesen...</em></p>
    }
    else if (String.IsNullOrEmpty(AppStateStore.TrackKey))
    {
        <p>
            Zunächst musst du einen Club auswählen, um die Strecken zu sehen.
        </p>
        <p class="container">
            @foreach (TenantSettings tenant in AppStateStore.Tenants)
            {
                if (tenant.TracksEnabled && tenant.TrackKey.CompareTo("demo") != 0)
                {
                    <div class="row">
                        <div class="col-sm-12 col-md-6 col-lg-4">
                            <button type="button" class="btn btn-lg btn-block btn-outline-info btn-social" @onclick="@(() => ShowRoutes(tenant.TrackKey))">@tenant.TenantName</button>
                        </div>
                    </div>
                }
            }
        </p>
    }

    <p>
        Hier kannst du Touren suchen, für Ausfahrten auswählen oder auch neue Touren erstellen und mit anderen teilen. Bei den Touren wird unterschieden:
        <ul>
            <li>Öffentliche Touren, d.h. sichtbar ohne hier angemeldet zu sein.</li>
            <li>
                Touren nur für Mitglieder, d.h. sichtbar nur, wenn du hier angemeldet bist und dein Account freigeschaltet wurde. Die Freischaltung erfolgt über das gleiche Schlüsselwort,
                das du für den MeetUpPlanner verwendest.
            </li>
        </ul>
    </p>
</div>

@if (null != AppStateStore.TrackKey)
{
    <div class="jumbotron">
        <h3>Anmeldung</h3>
        <AuthorizeView>
            <Authorized>
                <p>
                    Du bist angemeldet.
                    @if (null != _userInfo && !_userInfo.IsConfirmed)
                    {
                        <text>
                            Aber dein Account wurde noch nicht bestätigt. Gib bitte deine Profil-Daten ein zusammen mit dem Schlüsselwort, das du auch für den MeetUpPlanner kennst.
                        </text>
                    }
                </p>
            </Authorized>
            <NotAuthorized>
                <p>
                    Um Touren zu erstellen usw. musst du dich anmelden und entsprechende Berechtigungen erhalten.
                    <a href="/LoginProviders">Anmelden</a>
                </p>
            </NotAuthorized>
        </AuthorizeView>
    </div>
}

@code {
    [Parameter]
    public string TrackKey { get; set; }
    private NotificationMessage _notificationMessage;
    private UserContactInfo _userInfo = new UserContactInfo();

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(TrackKey))
        {
            AppStateStore.TrackKey = TrackKey;
        }
        try
        {
            // Read all tenant settings
            AppStateStore.Tenants = await Api.GetTenants();
            AppStateStore.TenantsAlreadyRead = true;
        }
        catch (Exception ex)
        {
            _notificationMessage.ShowError($"Fehler beim Lesen der Daten: {ex.Message}");
        }
        if (!String.IsNullOrEmpty(TrackKey))
        {
            Boolean validTrackKey = SetTenant(TrackKey);
            if (!validTrackKey)
            {
                TrackKey = null;
                AppStateStore.TrackKey = null;
                _notificationMessage.ShowWarning("Bitte einen existierenden Club auswählen.");
            }
        }
        if (!String.IsNullOrEmpty(AppStateStore.TrackKey))
        {
            AppStateStore.CurrentUser = await Api.GetUser();
            _userInfo = AppStateStore.CurrentUser.ContactInfo;
            if (null == _userInfo)
            {
                _userInfo = new UserContactInfo();
            }
        }
    }
    protected void ShowRoutes(string trackKey)
    {
        AppStateStore.TrackKey = trackKey;
        SetTenant(trackKey);
        NavigationManager.NavigateTo($"/{trackKey}");
    }

    private Boolean SetTenant(string trackKey)
    {
        Boolean validTrackKey = false;
        if (!String.IsNullOrEmpty(trackKey))
        {
            // If tenant key (TrackKey) is given as part of the query, check the list if a corresponding item can be found
            foreach (TenantSettings tenant in AppStateStore.Tenants)
            {
                if (tenant.TracksEnabled && !String.IsNullOrEmpty(tenant.TrackKey) && String.Compare(tenant.TrackKey, trackKey) == 0)
                {
                    AppStateStore.Tenant = tenant;
                    AppStateStore.TrackKey = tenant.TrackKey;
                    _notificationMessage.Hide();
                    validTrackKey = true;
                    break;
                }
            }
            if (!validTrackKey)
            {
                AppStateStore.TrackKey = null;
                _notificationMessage.ShowWarning("Bitte einen existierenden Club auswählen.");
            }
        }
        return validTrackKey;
    }
}
