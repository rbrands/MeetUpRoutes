@page "/"
@page "/{TrackKey}"
@using BlazorApp.Shared
@using BlazorApp.Client.Utils
@inject AppState AppStateStore
@inject BackendApiRepository Api
@inject NavigationManager NavigationManager



<h1>Auswahl des Clubs</h1>
<BlazorApp.Client.Shared.NotificationMessage @ref="@_notificationMessage" />
@if (!AppStateStore.TenantsAlreadyRead)
{
    <p><em>Einstellungen werden gelesen...</em></p>
}
else if (String.IsNullOrEmpty(AppStateStore.TrackKey))
{
    <p>
        Zunächst musst du einen Club auswählen, um die Strecken zu sehen.
    </p>
    @foreach (TenantSettings tenant in AppStateStore.Tenants)
    {
        if (tenant.TracksEnabled)
        {
            <p>
                <button class="btn btn-primary" @onclick="@(() => ShowRoutes(tenant.TrackKey))">@tenant.TenantName</button>
            </p>
        }
    }
}
else
{
    <p>@TrackKey</p>
    <p>AppStateStore.TrackKey = @AppStateStore.TrackKey</p>
}

@if (null != AppStateStore.TrackKey)
{ 
    <hr class="my-4" />
    <h2>Anmeldung</h2>
    <AuthorizeView>
        <Authorized>
            <p>
                Du bist angemeldet.
                @if (!_userInfo.IsConfirmed)
                {
                    <text>
                        Aber dein Account wurde noch nicht bestätigt. Gib bitte deine Profil-Daten ein zusammen mit dem Registrierungscode, den du erhalten hast.
                    </text>
            }
            </p>
        </Authorized>
        <NotAuthorized>
            <p>
                Um Touren zu erstellen usw. musst du dich anmelden und entsprechende Berechtigungen erhalten.
                <a href="/LoginProviders">Anmelden</a>
            </p>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Parameter]
    public string TrackKey { get; set; }
    private NotificationMessage _notificationMessage;
    private UserContactInfo _userInfo = new UserContactInfo();

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(TrackKey))
        {
            AppStateStore.TrackKey = TrackKey;
        }
        try
        {
            // Read all tenant settings
            AppStateStore.Tenants = await Api.GetTenants();
            AppStateStore.TenantsAlreadyRead = true;
        }
        catch (Exception ex)
        {
            _notificationMessage.ShowError($"Fehler beim Lesen der Daten: {ex.Message}");
        }
        if (!String.IsNullOrEmpty(TrackKey))
        {
            // If tenant key (TrackKey) is given as part of the query, check the list if a corresponding item can be found
            foreach (TenantSettings tenant in AppStateStore.Tenants)
            {
                if (tenant.TracksEnabled && !String.IsNullOrEmpty(tenant.TrackKey) && String.Compare(tenant.TrackKey, TrackKey) == 0)
                {
                    AppStateStore.Tenant = tenant;
                    AppStateStore.TrackKey = tenant.TrackKey;
                    _notificationMessage.Hide();
                    break;
                }
            }
            if (null == AppStateStore.Tenant)
            {
                TrackKey = null;
                AppStateStore.TrackKey = null;
                _notificationMessage.ShowWarning("Bitte einen existierenden Club auswählen.");
            }
            else
            {
                AppStateStore.CurrentUser = await Api.GetUser();
                _userInfo = AppStateStore.CurrentUser.ContactInfo;
            }
        }
    }
    protected void ShowRoutes(string trackKey)
    {
        AppStateStore.TrackKey = trackKey;
        NavigationManager.NavigateTo($"/{trackKey}");
    }

}
