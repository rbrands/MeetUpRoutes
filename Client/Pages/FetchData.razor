@page "/fetchdata"
@attribute [Authorize]
@using BlazorApp.Shared
@using BlazorApp.Client.Utils
@inject HttpClient Http
@inject BackendApiRepository Api

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <p>Identity Provider: @user.Principal.IdentityProvider</p>
        <p>User Id: @user.Principal.UserId</p>
        <p>User Details: @user.Principal.UserDetails</p>
        <p>
            Roles:
            @foreach (string role in user.Principal.UserRoles)
            {
                @role<text>, </text>
            }
        </p>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private User user;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await Api.GetUser();
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("/api/WeatherForecast");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }
}
