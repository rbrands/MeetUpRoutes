@using BlazorApp.Client.Utils
@using BlazorApp.Shared
@using System.Text.RegularExpressions
@inject AppState AppStateStore
@inject NavigationManager NavigationManager


<div class="card">
    <div class="card-header">

    </div>
    @if (!String.IsNullOrEmpty(RouteItem.Core.RouteLinkImage))
    {
        <a href="@RouteItem.Core.RouteLink" target="_blank">
            <img class="card-img-top" src="@RouteItem.Core.RouteLinkImage" alt="@RouteItem.Core.RouteLinkTitle">
        </a>
    }
    <div class="card-body">
        <h6 class="text-muted card-subtitle mb-2">
            @RouteItem.Core.LevelDescription
        </h6>
        <h4 class="card-title">
            @RouteItem.Core.Title
        </h4>
        <p class="card-text">
            <div class="overflow-auto" style="max-height: 500px">
                @((MarkupString)RouteItem.Core.Description)
            </div>
            <hr />
            @if (!String.IsNullOrEmpty(RouteItem.Core.RouteLink))
            {
                <a href="@RouteItem.Core.RouteLink" target="_blank" class="card-link">@RouteItem.Core.RouteLinkTitle</a>
            }
        </p>

    </div>
    <div class="card-footer">
        <div class="btn-toolbar" role="toolbar" aria-label="Aktionen zur Tour">
            <button class="btn btn-sm btn-outline-secondary" title="Ändern" @onclick="@(() => EditItem(RouteItem.Core.Id))" hidden="@HideAuthoring"><span class="oi oi-pencil"></span></button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ExtendedRoute RouteItem { get; set; } = new ExtendedRoute();

    protected void EditItem(string itemId)
    {
        NavigationManager.NavigateTo($"/{AppStateStore.TrackKey}/editroute/{itemId}");
    }
    private Boolean HideAuthoring
    {
        get
        {
            return (!AppStateStore.IsUserReviewer && RouteItem.Core.AuthorId.CompareTo(AppStateStore.CurrentUser.ContactInfo.Id) != 0);
        }
    }

}
