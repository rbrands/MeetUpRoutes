@using BlazorApp.Client.Utils
@using BlazorApp.Shared
@using System.Text.RegularExpressions
@inject AppState AppStateStore
@inject BackendApiRepository Api
@inject NavigationManager NavigationManager


<div class="card">
    <div class="card-header">
        @if (!RouteItem.Core.IsReviewed)
        {
            <span class="badge badge-warning p-2 m-1" title="Freigabe notwendig">Review!</span>
        }
        @if (RouteItem.Core.IsNonPublic)
        {
            <span class="badge badge-danger p-2 m-1"><span class="oi oi-key" title="Nicht öffentlich"></span></span>
        }
        @foreach (RouteTag rt in RouteItem.Core.RouteTags)
        {
            <span class="badge badge-@GetBadgeClass(rt.BadgeColor) p-2 m-1">
                @rt.TagLabel
            </span>
        }
        @if (!String.IsNullOrEmpty(RouteItem.Core.DirectionsLink))
        {
            <a href="@RouteItem.Core.DirectionsLink" class="btn btn-outline-success btn-sm" role="button" target="_blank" tite="Startort"><span class="oi oi-map-marker"></span></a>
        }
    </div>
    @if (!String.IsNullOrEmpty(RouteItem.Core.RouteLinkImage))
    {
        <a href="@RouteItem.Core.RouteLink" target="_blank">
            <img class="card-img-top" src="@RouteItem.Core.RouteLinkImage" alt="@RouteItem.Core.RouteLinkTitle">
        </a>
    }
    <div class="card-body">
        <h6 class="text-muted card-subtitle mb-2">
            @RouteItem.Core.LevelDescription
        </h6>
        <h5 class="card-title">
            @RouteItem.Core.Title
            @if (!String.IsNullOrEmpty(RouteItem.Core.Scope))
            {
                <text>&nbsp;</text><a href="/@AppStateStore.TrackKey/@RouteItem.Core.Scope"><span class="oi oi-link-intact"></span></a>
            }
        </h5>
        <p class="card-text">
            <div class="overflow-auto" style="max-height: 500px">
                @((MarkupString)RouteItem.Core.Description)
            </div>
            <small>
                <em>
                    @RouteItem.AuthorDisplayName @RouteItem.LastUpdate.ToLocalTime().ToString("dd.MM.yyyy")
                    @if (AppStateStore.IsUserReviewer && !String.IsNullOrEmpty(RouteItem.ReviewerDisplayName))
                    {
                        <text> Freigabe durch </text>@RouteItem.ReviewerDisplayName<text>&nbsp;</text>@RouteItem.Core.ReviewDate.ToLocalTime().ToString("dd.MM.yyyy")
                    }
                </em>
            </small>
            <hr />
            @if (!String.IsNullOrEmpty(RouteItem.Core.RouteLink))
            {
                <a href="@RouteItem.Core.RouteLink" target="_blank" class="card-link">@RouteItem.DisplayLinkTitle</a>
            }
        </p>

    </div>
    <div class="card-footer">
        <div class="btn-toolbar" role="toolbar" aria-label="Aktionen zur Tour">
            <AuthorizeView>
                <Authorized>
                    @if (AppStateStore.IsUserConfirmed)
                    {
                        <div class="btn-group mr-2" role="group" aria-label="Ändern">
                            <button class="btn btn-sm btn-outline-secondary" title="Ändern" @onclick="@(() => EditItem(RouteItem.Core.Id))" hidden="@HideAuthoring"><span class="oi oi-pencil"></span></button>
                            <button class="btn btn-sm btn-outline-secondary" title="Löschen" @onclick="@(() => DeleteItem())" hidden="@HideAuthoring"><span class="oi oi-trash"></span></button>
                        </div>
                    }
                </Authorized>
            </AuthorizeView>
            <div class="btn-group mr-2" role="group" aria-label="Tour-Infos">
                <a href="@RouteItem.Core.GpxLink" target="_blank" title="GPX-Link" class="btn btn-sm btn-outline-secondary" hidden="@String.IsNullOrEmpty(RouteItem.Core.GpxLink)">GPX</a>
                <a href="@RouteItem.Core.StravaLink" target="_blank" title="Strava" class="btn btn-sm btn-outline-secondary" hidden="@String.IsNullOrEmpty(RouteItem.Core.StravaLink)">Strava</a>
                <a href="@RouteItem.Core.PhotosLink" target="_blank" title="Fotos" class="btn btn-sm btn-outline-secondary" hidden="@String.IsNullOrEmpty(RouteItem.Core.PhotosLink)"><span class="oi oi-camera-slr"></span></a>
                <a href="@RouteItem.Core.VideoLink" target="_blank" title="Video" class="btn btn-sm btn-outline-secondary" hidden="@String.IsNullOrEmpty(RouteItem.Core.VideoLink)"><span class="oi oi-video"></span></a>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ExtendedRoute RouteItem { get; set; } = new ExtendedRoute();
    [CascadingParameter]
    public IModalService Modal { get; set; }
    private string[] BadgeClasses =
    {
        "primary",
        "secondary",
        "success",
        "danger",
        "warning",
        "info",
        "light",
        "dark"
    };

    private string GetBadgeClass(TagBadgeColor color)
    {
        return BadgeClasses[(int)color];
    }


    protected void EditItem(string itemId)
    {
        NavigationManager.NavigateTo($"/{AppStateStore.TrackKey}/editroute/{itemId}");
    }
    protected void DeleteItem(string itemId)
    {

    }
    private Boolean HideAuthoring
    {
        get
        {
            return (!String.IsNullOrEmpty(RouteItem.Core.AuthorId) && !AppStateStore.IsUserReviewer && RouteItem.Core.AuthorId?.CompareTo(AppStateStore.CurrentUser.ContactInfo.Id) != 0);
        }
    }

    protected async Task DeleteItem()
    {
        ModalResult result = await Confirm.ShowDialog(Modal, "Tour löschen?", "Sollen die Tour wirklich gelöscht werden?");
        if (result.Cancelled || !(result.Data is bool accepted) || !accepted)
        {
            return;
        }
        await Api.DeleteRoute(RouteItem.Core);
        NavigationManager.NavigateTo($"/{AppStateStore.TrackKey}/routes", true);
    }
}
